using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using System.Web.Mvc;
using AutoMapper;
using Vidly.Dtos;
using Vidly.Models;
using System.Web.Security;

namespace Vidly.Controllers.Api
{
    public class CustomersController : ApiController
    {
        private ApplicationDbContext _context;

        public CustomersController()
        {
            _context = new ApplicationDbContext();
        }

        //Convention => Get /api/customers
        //Action using Domain class
        //public IEnumerable<Customer> GetCustomers()
        //{
        //    return _context.Customers.ToList();
        //}

        //Action using Automapper to decouple from domain class
        public IHttpActionResult GetCustomers(string query = null)
        {
            ////original getcustomers
            //var  customerDtos =_context.Customers.ToList().Select(Mapper.Map<Customer, CustomerDto>);

            //include membership types for the ajax call for datables
            //var customerDtos = _context.Customers.Include(c => c.MembershipType)
            //                         .ToList()
            //                         .Select(Mapper.Map<Customer, CustomerDto>);
            

            //This change is to filter customers for view Rentalform
            var customersQuery = _context.Customers.Include(c => c.MembershipType);

            if (!String.IsNullOrWhiteSpace(query))
            customersQuery = customersQuery.Where(c => c.Name.Contains(query));
   
            var customerDtos = customersQuery
                          .ToList()
                          .Select(Mapper.Map<Customer, CustomerDto>);

            return Ok(customerDtos);
        }

        // GET /api/Customers/1
        //public Customer GetCustomer(int id)
        //{
        //    var customer = _context.Customers.SingleOrDefault(c => c.Id == id);

        //    if (customer == null)
        //  throw new HttpResponseException(HttpStatusCode.NotFound);

        //    return customer;
        //}

        //without using restful conventions
        //public CustomerDto GetCustomer(int id)
        //{
        //    var customer = _context.Customers.SingleOrDefault(c => c.Id == id);

        //    if (customer == null)
        //        throw new HttpResponseException(HttpStatusCode.NotFound);

        //    return Mapper.Map<Customer,CustomerDto>(customer) ;
        //}

        public IHttpActionResult GetCustomer(int id)
        {
            var customer = _context.Customers.SingleOrDefault(c => c.Id == id);

            if (customer == null)
                //throw new HttpResponseException(HttpStatusCode.NotFound);
                return NotFound();

            return Ok(Mapper.Map<Customer, CustomerDto>(customer));
        }


        // POST /api/customers
        //[System.Web.Mvc.HttpPost]
        //public Customer CreateCustomer(Customer customerDto)
        //{
        //    if (!ModelState.IsValid)
        //        throw new HttpResponseException(HttpStatusCode.BadRequest);

        //    _context.Customers.Add(customer);
        //    _context.SaveChanges();
        //    // new id will be generated by the database, when customer save to the database

        //    return customer;
        //}
        [System.Web.Mvc.HttpPost]
        //using "CustomerDto" as a return type give a reponse of 200OK but we need 201Create
        //public CustomerDto CreateCustomer(CustomerDto customerDto)
        public IHttpActionResult CreateCustomer(CustomerDto customerDto)
        {
            if (!ModelState.IsValid)
                //throw new HttpResponseException(HttpStatusCode.BadRequest);
                return BadRequest();

            var customer = Mapper.Map<CustomerDto,Customer>(customerDto);
            _context.Customers.Add(customer);
            _context.SaveChanges();
            // new id will be generated by the database, when customer save to the database
            customerDto.Id = customer.Id;          
           
            //return customerDto;
            
            //need to return the uri of the new created object e.g /api/customers/10
            return Created(new Uri(Request.RequestUri + "/" + customer.Id), customerDto);
        }

        // PUT /api/customers/1

        //[System.Web.Http.HttpPut]
        //public void UpdateCustomer(int id, Customer customer)
        //{
        //    if (!ModelState.IsValid)
        //        throw new HttpResponseException(HttpStatusCode.BadGateway);

        //    var customerInDb = _context.Customers.SingleOrDefault(c => c.Id == id);

        //    if (customerInDb == null)
        //        throw new HttpResponseException(HttpStatusCode.NotFound);

        //    customerInDb.Name = customer.Name;
        //    customerInDb.BirthDate = customer.BirthDate;
        //    customerInDb.IsSubscribedToNewsletter = customer.IsSubscribedToNewsletter;
        //    customerInDb.MembershipTypeId = customer.MembershipTypeId;
        //    _context.SaveChanges();
        //}
        [System.Web.Http.Authorize(Roles = RoleName.CanManageMovies)]
        [System.Web.Mvc.HttpPut]
        public IHttpActionResult UpdateCustomer(int id, CustomerDto customerDto)
        {
            if (!ModelState.IsValid)
                return BadRequest();

            var customerInDb = _context.Customers.SingleOrDefault(c => c.Id == id);

            if (customerInDb == null)
                return NotFound();
            //if you have a exsisting object "customerInDb" to update you can pass it into the Mapper,so the
            // DB can track the changes

            Mapper.Map(customerDto, customerInDb);

            //because the exsisting object is passed into the mapper, there is no need to use the below:
            //customerInDb.Name = customerDto.Name;
            //customerInDb.BirthDate = customerDto.BirthDate;
            //customerInDb.IsSubscribedToNewsletter = customerDto.IsSubscribedToNewsletter;
            //customerInDb.MembershipTypeId = customerDto.MembershipTypeId;

            _context.SaveChanges();

            return Ok();
        }

        // DELETE /api/customers/1
        [System.Web.Http.Authorize(Roles = RoleName.CanManageMovies)]
        [System.Web.Http.HttpDelete]
        public IHttpActionResult DeleteCustomer(int id)
        {
            var customerInDb = _context.Customers.SingleOrDefault(c => c.Id == id);

            if (customerInDb == null)
                return NotFound();

            _context.Customers.Remove(customerInDb);
            _context.SaveChanges();

            return Ok();
        }

    }
}
